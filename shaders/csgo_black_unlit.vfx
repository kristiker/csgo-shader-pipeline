//=================================================================================================
// Reconstructed with Source 2 Viewer 6.0.0.0 - https://valveresourceformat.github.io
//=================================================================================================
HEADER
{
    Description = "Just renders black";
    Version = 1;
}

MODES
{
    CsgoForward();
    Depth("csgo_depth_only.vfx");               // Depth & shadow pass
    ToolsVis(S_MODE_TOOLS_VIS);                 // mat_fullbright
    ToolsWireframe("csgo_tools_wireframe.vfx"); // mat_wireframe
}

FEATURES
{
    Feature( F_DO_NOT_CAST_SHADOWS, 0..1, "Shadows" );
    Feature( F_RENDER_BACKFACES, 0..1, "2-Sided Rendering" );
    Feature( F_DONT_FLIP_BACKFACE_NORMALS, 0..1, "2-Sided Rendering" );
    Feature( F_DISABLE_Z_BUFFERING, 0..1, "Z-Buffering" );
    Feature( F_DISABLE_Z_PREPASS, 0..1, "Z-Prepass" );
    FeatureRule( Requires1( F_DONT_FLIP_BACKFACE_NORMALS, F_RENDER_BACKFACES ), "Only applies to backfaces" );
}

COMMON
{
    #include "system.fxc"

    #include "common/PerViewConstantBuffer_t.hlsl"
    #include "common/PerViewConstantBufferCsgo_t.hlsl"

    struct VS_INPUT
    {
        #include "common/vertexinput.hlsl"
    };

    struct PS_INPUT
    {
    };

    struct PS_OUTPUT
    {
        float4 vColor : SV_Target0;
    };
}

VS
{
    StaticCombo( S_MOLTEN_VK, 0..1 );
    StaticCombo( S_MODE_TOOLS_VIS, 0..1 );

    #include "common/vertex.hlsl"

    // SPIR-V source (4028), SPVC_BACKEND_HLSL reflection with SPIRV-Cross by KhronosGroup
    // Source 2 Viewer 6.0.0.0 - https://valveresourceformat.github.io

    cbuffer PerViewConstantBuffer_t : register(b15, space0)
    {
        column_major float4x4 g_matWorldToProjection : packoffset(c0);
        float4 g_vClipPlane0 : packoffset(c17);
        float4 g_vWorldToCameraOffset : packoffset(c33);
    };

    cbuffer PerViewConstantBufferCsgo_t : register(b18, space0)
    {
        float4 g_vHighPrecisionLightingOffsetWs : packoffset(c30);
    };

    ByteAddressBuffer _5815 : register(t30, space2);
    ByteAddressBuffer _5203 : register(t32, space2);

    static float4 gl_Position;
    static float gl_ClipDistance[1];
    static float3 _6017;
    static float2 _5759;
    static float4 _5837;
    static uint _3984;
    static float3 _3486;
    static float3 _3487;
    static float4 _3488;
    static float4 _3490;
    static float _3495;
    static uint2 _5072;

    struct SPIRV_Cross_Input
    {
        float3 _6017 : TEXCOORD0;
        float2 _5759 : TEXCOORD1;
        float4 _5837 : TEXCOORD2;
        uint _3984 : TEXCOORD3;
    };

    struct SPIRV_Cross_Output
    {
        float3 _3486 : TEXCOORD0;
        float3 _3487 : TEXCOORD1;
        float4 _3488 : TEXCOORD2;
        float4 _3490 : TEXCOORD3;
        float _3495 : TEXCOORD4;
        nointerpolation uint2 _5072 : TEXCOORD5;
        float4 gl_Position : SV_Position;
        float gl_ClipDistance0 : SV_ClipDistance0;
    };

    void vert_main()
    {
        _2265 _21981;
        [unroll]
        for (int _2ident = 0; _2ident < 8; _2ident++)
        {
            _21981._m0[_2ident] = _5203.Load(_2ident * 4 + _3984 * 32 + 0);
        }
        float3x4 _9586 = asfloat(uint3x4(_5815.Load4(_21981._m0[1] * 48 + 0), _5815.Load4(_21981._m0[1] * 48 + 16), _5815.Load4(_21981._m0[1] * 48 + 32)));
        _2265 _13589;
        [unroll]
        for (int _3ident = 0; _3ident < 8; _3ident++)
        {
            _13589._m0[_3ident] = _5203.Load(_3ident * 4 + _3984 * 32 + 0);
        }
        float4 _22293 = float4(float((_13589._m0[0] >> 0u) & 255u), float((_13589._m0[0] >> 8u) & 255u), float((_13589._m0[0] >> 16u) & 255u), float(_13589._m0[0] >> 24u)) * 0.0039215688593685626983642578125f;
        float3 _7940 = _22293.xyz;
        float3 _20064 = _7940 * 0.077399380505084991455078125f.xxx;
        float3 _24533 = pow(mad(_7940, 0.947867333889007568359375f.xxx, 0.0521326996386051177978515625f.xxx), 2.400000095367431640625f.xxx);
        float3 _21918 = float3((_22293.x <= 0.040449999272823333740234375f) ? _20064.x : _24533.x, (_22293.y <= 0.040449999272823333740234375f) ? _20064.y : _24533.y, (_22293.z <= 0.040449999272823333740234375f) ? _20064.z : _24533.z);
        float3 _21242 = mul(_9586, float4(_6017, 1.0f));
        float4 _13745 = float4(_21242, 1.0f);
        float4 _16057 = mul(g_matWorldToProjection, _13745 + (g_vWorldToCameraOffset * 1.0f));
        float _19081 = dot(_13745, g_vClipPlane0);
        _3486 = _21242 - g_vHighPrecisionLightingOffsetWs.xyz;
        _3487 = normalize(mul(_9586, float4(_5837.xyz, 0.0f)));
        _3488 = _5759.xyxy;
        _3490 = float4(_21918.x, _21918.y, _21918.z, _22293.w);
        _3495 = _19081;
        _5072 = uint2(_13589._m0[3] & 65535u, (_13589._m0[4] >> 4u) & 511u);
        _16057.y = -_16057.y;
        gl_Position = _16057;
        gl_ClipDistance[0u] = _19081;
    }

    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        _6017 = stage_input._6017;
        _5759 = stage_input._5759;
        _5837 = stage_input._5837;
        _3984 = stage_input._3984;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.gl_ClipDistance0.x = gl_ClipDistance[0];
        stage_output._3486 = _3486;
        stage_output._3487 = _3487;
        stage_output._3488 = _3488;
        stage_output._3490 = _3490;
        stage_output._3495 = _3495;
        stage_output._5072 = _5072;
        return stage_output;
    }

    // ---------  SPIRV -> HLSL end  ---------



    BoolAttribute(CanBatchWithDynamicShaderConstants, true);
    BoolAttribute(SupportsAggregateInstancing, true);

}

PS
{
    StaticCombo( S_MOLTEN_VK, 0..1 );
    StaticCombo( S_MODE_TOOLS_VIS, 0..1 );

    RenderState(BackStencilFunc, F_RENDER_BACKFACES ? 5 : 7);
    RenderState(CullMode, (F_RENDER_BACKFACES || exists(UNKNOWN[2f61b340])) ? 0 : 1);
    RenderState(DepthEnable, F_DISABLE_Z_BUFFERING ? 0 : 1);
    RenderState(DepthWriteEnable, F_DISABLE_Z_BUFFERING ? 0 : 1);
    RenderState(StencilEnable, 1);
    RenderState(StencilFunc, 5);
    RenderState(StencilReadMask, 1);
    RenderState(StencilRef, 3);
    RenderState(StencilWriteMask, 254);
    bool g_bHighlightDeprecated < Attribute("g_bHighlightDeprecated"); UiType(CheckBox); >;
    bool g_bIsDeprecated < Attribute("bIsDeprecated"); UiType(CheckBox); >;
    float g_fToolsVisHeightTint < Attribute("g_fToolsVisHeightTint"); UiType(Slider); >;
    float g_fToolsVisMaxHeightRange < Default(1); Attribute("g_fToolsVisMaxHeightRange"); UiType(Slider); >;
    ExternalDescriptorSet g_globalLateBoundBindlessSet < Attribute("g_globalLateBoundBindlessSet"); >;
    ExternalDescriptorSet g_lightBinnerGpuSet < Attribute("g_lightBinnerGpuSet"); >;
    int g_nToolsVisMode < Attribute("g_nToolsVisMode"); UiType(Slider); >;
    CreateTexture2DWithoutSampler(g_tFogCubeTexture) < Attribute("CubemapFogTexture"); SrgbRead(true); >;
    float3 g_vFlatOverlayColor < Default2(1, 0); Attribute("FlatOverlayColor"); UiType(VectorText); >;
    float4 g_vShaderIDColor < UiType(VectorText); >;

    // Fog
    bool g_bFogEnabled < Default(1); UiType(CheckBox); UiGroup("Fog"); >;

    // SPIR-V source (4684), SPVC_BACKEND_HLSL reflection with SPIRV-Cross by KhronosGroup
    // Source 2 Viewer 6.0.0.0 - https://valveresourceformat.github.io

    cbuffer _Globals_ : register(b0, space0)
    {
        uint g_bFogEnabled : packoffset(c0.z);
    };

    cbuffer _1007_4459 : register(b1, space0)
    {
        float3 _4459_m0 : packoffset(c19);
    };

    cbuffer _2916_5037 : register(b4, space0)
    {
        float4 g_vHighPrecisionLightingOffsetWs : packoffset(c18);
        float4 _5037_m1 : packoffset(c19);
        float4 _5037_m2 : packoffset(c20);
        float4 _5037_m3 : packoffset(c21);
        float4 _5037_m4 : packoffset(c22);
        float4 _5037_m5 : packoffset(c23);
        column_major float4x4 _5037_m6 : packoffset(c24);
        float4 _5037_m7 : packoffset(c28);
        float4 _5037_m8 : packoffset(c29);
        float4 _5037_m9 : packoffset(c30);
    };

    SamplerState _4038 : register(s45, space0);
    TextureCube<float4> _5741 : register(t102, space0);

    static float3 _5759;
    static float4 _5482;

    struct SPIRV_Cross_Input
    {
        float3 _5759 : TEXCOORD0;
    };

    struct SPIRV_Cross_Output
    {
        float4 _5482 : SV_Target0;
    };

    void frag_main()
    {
        float3 _10061 = _5759 + _5037_m9.xyz;
        float4 _6805;
        // TODO: into fogging.hlsl
        if (g_bFogEnabled != 0u)
        {
            float _18390;
            float2 _21493;
            float3 _18406 = _10061 - _4459_m0;
            float3 _22821;
            do
            {
                _21493 = _18406.xy;
                _18390 = _10061.z;
                [branch]
                if ((dot(_21493, _21493) > _5037_m3.x) && ((_18390 * _5037_m3.z) < _5037_m3.y))
                {
                    float2 _21390 = clamp(mad(g_vHighPrecisionLightingOffsetWs.zw, float2(length(_21493), _18390), g_vHighPrecisionLightingOffsetWs.xy), 0.0f.xx, 1.0f.xx);
                    float _11897 = (pow(_21390.x, _5037_m1.x) * pow(_21390.y, _5037_m1.y)) * _5037_m2.w;
                    _22821 = lerp(0.0f.xxx, float4(_5037_m2.xyz, _11897).xyz, _11897.xxx);
                    break;
                }
                _22821 = 0.0f.xxx;
                break;
            } while(false);
            float3 _22859;
            do
            {
                if ((dot(_18406, _18406) > _5037_m7.x) && ((_5037_m7.z * _18390) < _5037_m7.y))
                {
                    float _16990 = clamp(pow(max(0.0f, mad(length(_21493), _5037_m4.y, _5037_m4.x)), _5037_m4.w), 0.0f, 1.0f) * clamp(pow(max(0.0f, mad(_18390, _5037_m5.y, _5037_m5.x)), _5037_m5.z), 0.0f, 1.0f);
                    float _8437 = clamp(_16990, 0.0f, 1.0f) * _5037_m7.w;
                    _22859 = lerp(_22821.xyz, float4((_5741.SampleLevel(_4038, normalize(mul(float4(_18406, 0.0f), _5037_m6).xyz), _5037_m5.w * clamp(mad(-_16990, _5037_m4.z, 1.0f), 0.0f, 1.0f)) * _5037_m8.x).xyz, _8437).xyz, _8437.xxx);
                    break;
                }
                _22859 = _22821.xyz;
                break;
            } while(false);
            _6805 = float4(_22859.x, _22859.y, _22859.z, float4(0.0f, 0.0f, 0.0f, 1.0f).w);
        }
        else
        {
            _6805 = float4(0.0f, 0.0f, 0.0f, 1.0f);
        }
        _5482 = _6805;
    }

    PS_OUTPUT MainPs(PS_INPUT i)
    {
        PS_OUTPUT o;
        o.vColor = float4(0, 0, 0, 1);
        if (g_bFogEnabled)
        {
            ApplyFog(o.vColor);
        }

        return o;
    }

    // ---------  SPIRV -> HLSL end  ---------
    BoolAttribute(unlit, true);

}
